# test manipulation de tableau
#
function lecture_fichier(T_2D)
  println("je suis dans lecture fichier")
  lines = readlines("Data_Test_manip_table.txt")
  line=lines[1]
  line_decompose=split(line)
  n=parse(Int64, line_decompose[1])
  # on réserve la place pour le tableau T_2D
  for i in 1:n
    push!(T_2D,[])
  end
  for i in 1:n
    for j in 1:n
      push!(T_2D[i],0)
    end
  end

  # maintenant on traite les lignes suivantes
  line_suiv=1
  for i in line_suiv+1:line_suiv+n 
    line=lines[i]
    line_decompose=split(line)
    som_deb=i-line_suiv
    for j in 1:n
      som_fin=j
      pds=parse(Int64, line_decompose[j])
      T_2D[som_deb][som_fin]=pds
    end
  end
  return n
end
function reconstituer_cycle(T_2D,n::Int)
  println("je suis dans reconstituer cycle ")
  # table à une dimension qui indique si les sommets sont parcourus dans le cycle
  Cycle=[]
  for i in 1:n
    push!(Cycle,0)
  end
  i=1; indic=1 ; Cycle[i]=1
  println("le cycle est ")
  print(" ",i)
  while indic!=0
    indic=0
    for j in 1:n
      if T_2D[i][j]==1 && Cycle[j]!=1
        Cycle[j]=1
        i=j # sommet suivant
        indic=1 # on a trouvé le suivant
        print(" ",i)
        break
      end # fin du if
    end # fin du for
    
  end # fin du while
  #println("")
end
function main()
  println("je suis dans main")
  
  # T_2D tableau carré
  T_2D=[]
  n = lecture_fichier(T_2D)
  for i in 1:n
    for j in 1:n
      print(T_2D[i][j]," ")
    end
    println(" ")
  end
  # la table T_2D est la matrice d'adjacence d'un cycle
  # on reconstitue ci-dessos ce cycle
  reconstituer_cycle(T_2D,n)
end
main()